// Code generated by go-bindata.
// sources:
// assets/.DS_Store
// assets/tpl/curd.tpl
// assets/tpl/error.tpl
// assets/tpl/markdown.tpl
// DO NOT EDIT!

package tool

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsDs_store = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9a\x5d\x6c\x14\xd7\x15\xc7\xcf\x39\x6b\x60\x66\xec\x85\x31\x05\xdb\xb3\x7c\x2d\x36\x60\x03\xb6\x6b\x04\xb6\x31\x14\xbc\xfe\x02\x5b\x18\xdb\x78\xfd\x89\x3f\xd6\xb3\x3b\x17\x3c\x65\x3c\xe3\xee\xcc\xda\x50\x64\x89\x42\xbf\xd5\xba\xad\xe8\x4b\x4b\xfb\xd2\xd2\x46\x0a\x0f\x89\x12\xac\x44\x48\x51\xa4\x10\x25\x91\x48\x94\x20\x4d\xa2\x24\x24\x44\x49\x5e\x50\x1e\xa2\x88\x88\x88\x3c\x25\x9a\xdd\x71\x6c\x1c\x0f\x51\x1e\x22\x10\x99\x9f\x64\xfd\x47\x3b\x67\x8e\xef\x9c\x7b\xfe\x57\xbe\xbe\x0b\x00\x58\x9f\x52\x76\x00\x84\x01\x80\x83\x8c\x8a\x39\xb0\x28\x9c\xfb\xf3\x2d\xc8\xd5\x2c\x27\x1f\x80\x08\xe6\x78\x5c\x33\xe2\x00\x70\x27\x3e\xbe\x78\x2e\x1f\x1f\x1f\x1f\x1f\x1f\x9f\x07\x0c\x66\x84\xcb\x7e\xd0\x03\xf1\xf1\xf1\x79\xe8\x40\x77\x63\xe0\x68\xc4\xd5\x33\x19\x45\xf7\x3e\xb9\x9a\x35\xef\x19\xd1\xd5\xb0\xab\x11\x57\xcf\x64\x14\xdd\x38\x72\x35\xcb\x55\xce\x55\xd1\xd5\xb0\xab\x11\x57\xcf\x64\xd4\x5d\xb4\xd0\xdd\x7c\xa0\xfb\x9b\xd1\xdd\xa1\xa0\xe8\x6a\xd8\xd5\xc8\x0f\x53\x1b\x1f\x9f\x47\x01\xc7\x3e\x01\xb0\x60\x1c\xb4\xf8\xe4\xfc\xfd\xbb\xa6\x9a\x56\x45\xc5\xdb\x48\x81\xac\x25\x4b\x97\x71\xbc\x90\xcd\x67\x2f\xcf\xe6\x87\xa2\xa3\xc6\x64\xd4\x92\xad\x94\x59\x2f\x27\x63\xe2\xda\xa8\xaa\xb0\xb8\x9c\xec\x55\x15\x6b\xb4\x8b\xe9\x4d\x1a\x9b\x60\x7a\x7b\xb2\x55\xb6\x58\x72\xc0\x09\xee\x32\x0c\x2d\x2e\xbb\xd7\x72\xbc\x47\x65\x93\x31\x71\x55\x83\xa1\x5b\xb2\xaa\xb3\x64\x3a\x5f\x26\xc7\x60\xaf\xaa\x2b\xc6\x64\xbd\x91\xd2\x15\x73\x60\xde\x8d\xf4\x75\x87\x6c\x8d\xc6\xe5\x24\x57\x14\xd1\x46\xd2\x43\xe7\x39\x3e\x26\x16\x9c\x3e\x5d\x59\x5d\x59\x1a\xde\xb5\xbb\x72\xaa\x34\x7c\xba\xba\xba\xa2\x34\xbc\x6b\x67\xd5\xd4\x14\xcf\x71\x52\xf1\x81\xce\xe1\xd4\xd9\xe9\x7f\x5e\xb8\xf8\xbf\xff\x3f\xf6\xc2\xd5\xcc\x1b\xcf\xae\x20\x90\xbb\xa0\x14\x2f\xce\x95\x42\x33\x27\x1a\x32\xa5\x08\xfc\x6e\xb1\x52\x48\x72\x5c\x50\x62\xe2\xca\x09\x95\x4d\xb6\x8f\x5b\xaa\xa1\x9b\x3d\x2c\x69\xaa\x86\x1e\x13\x57\x98\xa3\xc6\x64\x4b\xc2\xd0\x3b\x92\xcc\xb9\xdf\x9b\x30\xb4\xd4\x98\x6e\xc6\xc4\xdc\x84\xac\x25\x52\x9a\x6c\xb1\x3a\x4d\x8b\xaa\xbf\x64\x66\x9f\xc5\x4e\x5a\xce\xd5\x51\xd3\x48\x5a\x0d\xe9\xc0\x98\x28\xa6\x4c\xd6\xc9\x34\xd9\x52\x27\x58\xa3\x6c\x31\xb3\x4f\x4d\x18\xba\x13\x26\x22\x7f\x29\x67\xf5\xba\xcd\xa5\xbb\x7e\xd6\xd8\xda\x35\x68\x07\x97\xaf\x10\x73\x57\x0a\xc2\x51\x55\x61\xba\xa5\x1e\x53\x59\xb2\x7b\xd2\x99\x89\x7e\xd9\x4c\x30\x5d\x51\xf5\xe3\xbd\x13\xaa\xa9\xc6\x35\xd6\xa5\xcb\x63\x2c\x37\x70\x8b\xe7\xed\xbc\xfc\x82\xa0\x14\x92\xd6\xce\xde\x5a\xf8\x08\x27\x16\x71\x7d\xa9\xb8\xfa\x8b\x94\x6a\x9d\xb2\xd7\x6f\x08\x07\x85\x42\x69\x93\x57\x34\x2f\xce\x70\x83\x8a\x6c\xb1\xc3\x86\xe2\x8c\x40\xb1\xb7\x14\x97\x04\xa5\x42\x69\xbb\x67\x7e\x6e\xc0\x89\x6f\x48\x32\xd9\x62\x8a\x1d\x2c\x2b\xff\x69\xc5\x0e\x49\xf0\x1c\xb9\xe9\xbc\xb9\xcc\xf1\x76\xb0\xb2\xaa\x7a\x77\x8d\xe0\x1d\x79\x42\xd5\x15\xd1\xe4\x79\x3b\xb8\x6f\x7f\x6d\xa4\x4e\x90\xbc\x22\xbb\x35\x39\xce\x34\x51\xe1\x39\x3b\xd8\x74\xe0\x60\x73\x8b\x77\x68\xef\x44\x66\x66\xc5\x43\x4e\xf0\xe1\xb6\xf6\x8e\x23\xde\xc1\x7d\x09\x63\x6c\x8c\xe9\x96\x99\x8b\xa5\x3c\x67\x77\xf7\xf4\x06\xa5\x7e\x69\xc0\xbb\xd2\xaf\x70\xc3\x4e\x2d\x5a\x65\xd3\x6a\x1f\x67\xba\x53\x8e\xfc\x82\xbc\xa1\x42\x49\xea\x77\x3e\xaf\x53\x14\xa6\x70\x1c\x57\x14\x29\xc9\x34\x69\x7a\x1a\xf9\xa2\x48\x85\xdb\xb4\x1c\x48\x50\x0e\x11\x68\x86\x41\x60\x30\x0e\xe7\xe0\x4f\x30\x0d\x7f\x81\x0b\x70\x11\x9e\x80\x19\x78\x1e\x5e\x86\x57\xe1\x75\x78\x03\xae\xc3\xbb\xf0\x11\xdc\x82\xdb\xf0\x39\xdc\x81\x2f\xe0\x2b\xe4\x50\xc4\x3c\x0c\xe3\x46\x2c\xc2\x4d\xb8\x03\xf7\x60\x3d\x36\x63\x27\x46\xb1\x0b\x47\x50\x45\x03\x4f\xe1\xaf\xf0\xb7\xf8\x7b\xfc\x03\xfe\x11\xcf\xe3\x3f\xf0\xbf\x78\x09\x9f\xc4\xa7\xf0\x69\xbc\x8c\xcf\xe1\x55\x7c\x0d\xdf\xc4\x1b\xf8\x3e\xde\xc4\x0f\xf0\x16\x7e\x8a\x77\x09\x88\x23\x81\xb2\x29\x87\x56\xd3\x1a\xda\x4c\x65\x54\x45\x35\xb4\x87\xf6\x52\x23\xb5\x52\x27\x0d\xd2\x10\xc5\x68\x84\x0c\x3a\x49\x67\xe9\x1c\xfd\x9a\x7e\x43\xd3\x74\x9e\xfe\x9e\x79\x1d\x9a\x35\x27\xbb\xd7\x9b\xf4\xef\x7b\xcc\xe9\xae\x53\x81\xb6\xc5\xcc\x19\x1a\x1a\x16\x46\x1e\x8c\x39\xdf\xc9\xc9\x38\xf2\x27\xab\x56\xaf\xdf\x52\x5e\xb5\xff\x40\x5b\xcf\x37\x1d\xb1\x60\x9e\xe7\x5b\x20\xdd\xe1\x99\x96\x4c\xb7\xf0\x6c\xcb\xa5\x27\xfb\x5e\x6f\xe5\xe5\x17\x48\xa1\x35\xc2\x3a\xaf\x8e\xea\x56\x75\x85\x9d\xe4\x9c\xf6\x13\x97\xd9\xd2\x86\xf0\xc6\xc2\xa2\x50\xc8\xab\x5d\x45\xa7\x01\x39\x5b\x2a\x2e\xd9\xba\x6d\xfb\x7d\xc2\x48\x9c\xe1\x38\x3b\xed\xd2\x9d\xa1\x4a\xef\x95\x40\xe6\xc4\x80\x5d\xbd\xbb\x46\x0a\xed\x15\xf6\x79\x37\xbd\xc2\x8b\x4b\xec\xda\x48\x9d\x24\x34\x08\x4d\xde\xd9\x4c\x5e\xcc\xb2\x0f\x36\xb7\x48\xa1\x43\xc2\x61\xef\x6c\x87\x78\x71\xa9\xdd\xde\x71\x44\x12\xa2\x42\xb7\x67\x36\x67\xe9\x13\xc1\x96\x7a\xfb\xfa\xf9\xed\x21\xcf\x25\x84\xe3\xbf\xbf\xd7\xfe\x03\x97\xe0\x0a\xbc\x04\xd7\xe0\x3a\xbc\x05\x37\xe1\x63\xf8\x0c\xbe\x44\xc4\x65\x98\x8b\xf9\x58\x80\x6b\x70\x2d\xae\xc7\x62\x2c\xc3\x6a\xac\xc5\x3a\x6c\xc0\x46\x6c\xc2\x36\xec\xc2\x61\x3c\x86\xa3\xf8\x73\x3c\x81\x1a\xa6\x70\x0a\xcf\xe1\x9f\x71\x1a\xff\x8a\x7f\xc3\xf3\xf8\x2f\xbc\x88\x8f\xe3\x65\x9c\xc1\x67\xf0\x59\xbc\x82\x57\xf1\x1a\x5e\xc7\x1b\xf8\x5e\xda\x6d\x1f\xe2\x27\x78\x1b\xef\x12\x51\x80\x96\xd0\x52\xe2\x28\x97\x24\xda\x40\x5b\x69\x1b\x95\x51\x39\x55\x50\x0d\xd5\x52\x0b\x1d\xa1\x4e\x8a\x52\x17\x0d\x51\x9c\x12\x0b\x3c\x26\x2f\xf0\x98\x36\xe7\xb1\x89\x68\x52\xd7\x0c\xfd\xf8\xdc\x7f\x09\x7c\x7c\x7c\x7c\x7c\x7c\x7c\x1e\x09\x02\x19\x09\x67\x03\x40\x93\xf7\xf9\xbf\x8f\x8f\xcf\x23\x0c\x66\x35\x46\x1b\xeb\xef\xf3\xa7\x3e\xb9\x07\x01\x23\xb3\x0f\x7c\xc7\x41\x00\x65\xbe\x30\x54\xe2\x7e\x56\x01\x73\xcf\x3d\x1c\x87\x01\xfe\xfe\xdf\xdf\xff\xff\xc8\xf7\xff\x5f\x07\x00\x00\xff\xff\xb7\xf2\x77\x9e\x04\x28\x00\x00")

func assetsDs_storeBytes() ([]byte, error) {
	return bindataRead(
		_assetsDs_store,
		"assets/.DS_Store",
	)
}

func assetsDs_store() (*asset, error) {
	bytes, err := assetsDs_storeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/.DS_Store", size: 10244, mode: os.FileMode(420), modTime: time.Unix(1597312287, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTplCurdTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x4d\x8f\xdb\x36\x10\x3d\xdb\x80\xff\xc3\xc4\x08\x02\x29\xb0\xe5\xa4\x28\x7a\x48\xe1\x02\x69\x12\x07\x45\x9b\x6c\x90\x4d\x4f\x45\x0f\xb4\x38\xf2\x72\x57\x22\x55\x92\x4a\xe1\x08\xfa\xef\xc5\x90\x94\x6c\x4b\xda\x5d\x37\x5f\xbe\x58\xa6\xe6\xcd\xbc\xe1\xbc\x21\xc7\x25\x4b\x6f\xd8\x0e\xa1\xae\x93\x77\xfe\xf1\x2d\x2b\xb0\x69\x66\x53\x51\x94\x4a\x5b\x88\x66\xd3\xc9\x1c\xb5\x56\xda\xcc\x67\xd3\xc9\x8e\x6f\x61\x4e\xc6\x5a\x5d\x63\x6a\xdf\x28\x5e\xe5\xd8\x34\x2b\x21\x2d\x6a\xc9\xf2\x55\x79\xb3\x5b\x71\x66\xd9\x96\x19\x9c\xcf\xa6\x84\xde\x09\x7b\x55\x6d\x93\x54\x15\xab\x6b\x21\x3f\x5d\x55\xab\x54\x95\x02\xf5\x7c\x36\x8d\xc9\xa2\xae\x93\x0f\x6c\x9b\xe3\x0b\x55\x14\x28\x2d\x05\xb7\xfb\xd2\x71\xba\xb4\xba\x4a\xad\xa7\x04\xc6\xfd\x80\x9a\x10\x9a\xc9\x1d\xc2\xc3\xeb\x05\x3c\x14\x16\x0b\x78\xb6\x86\x64\x23\x30\xe7\xa6\x69\xea\xda\xad\x25\x01\xe6\x3f\xed\xe2\x87\x7d\x19\x16\xdb\x95\x8d\xd2\x05\xb3\x2d\x18\x7a\xf6\xef\xb1\x60\xfa\x86\x38\xd5\x35\x4a\x4e\x0f\x0d\x91\x5e\xad\xe0\x39\xe7\x7d\x8a\xc2\x00\x83\xac\x92\xa9\x15\x4a\x82\x55\xc0\x38\x07\x06\x46\xc8\x5d\x8e\xa0\x31\x55\x9a\xd3\x72\x9b\x72\x80\x59\x7a\x76\x3e\xdd\x4e\xc3\x12\x5e\x69\xfd\x9b\x34\xa8\xed\x86\x89\x1c\xf9\x02\xf8\x16\x0c\xfb\x88\x90\xb2\x3c\x87\xcc\x2d\xce\xa6\x14\x69\x84\x46\x14\x02\x3d\xee\xad\xc7\x10\x69\x34\x55\x6e\x07\x6f\x16\xf0\x5e\xfd\x6b\x9e\x67\x19\xa6\x16\x39\x08\x69\x7f\xfa\x71\x41\x64\x3c\xa1\x98\x36\x9d\x76\x85\x6f\x69\xa7\x77\x7c\x9b\xbc\x46\xfb\xf2\xd7\x28\x4e\x2e\xd9\x47\x0c\xf1\xe2\xd9\x74\x22\x32\x87\x5a\x03\xdf\x26\xaf\x08\xfa\xb3\xfb\xfd\x60\x0d\x52\xe4\xe4\x65\x42\x6e\x34\xda\x4a\x4b\x5a\x5a\xc0\xf2\xe9\xa2\x9f\xed\x6c\x3a\x69\x66\xd3\x49\xb0\xf2\xce\x69\x07\x92\x63\x92\x0b\x82\x1f\x8a\xf1\x12\x73\xb4\x78\x6f\x3d\xb8\x33\x1b\x94\x24\xd3\xaa\x38\xab\x28\x6f\x95\xdd\xa8\x4a\xfa\x82\x6c\x84\xe4\xfe\x65\xdf\xcc\xb3\x39\xaa\x9d\x5f\x08\x85\x6b\x31\xae\x7c\xa3\xc4\xa3\x4e\xe1\x03\x75\x43\x5d\x83\xc8\xfc\x8b\xe4\x9d\x16\x05\xd3\xfb\xdf\x71\x0f\xee\xcd\x89\xf0\x4f\x25\xbf\x08\xfa\x75\x5f\xb0\xf4\x6a\x38\xab\xe8\x61\x8f\x9e\xad\xe1\x51\x8f\x66\xdd\xdc\x26\x8b\x8d\xd0\xc6\x46\x6d\xe9\xbe\x38\x1b\xe2\x7b\x92\x40\xd3\xc4\x3e\xb4\xc8\x3a\xa9\x1d\xa9\xac\xed\xe2\x20\xa1\xa0\xb1\xb6\x78\xfe\xbd\x53\x4e\x60\x7f\x4a\xde\x97\xe4\xa0\xea\x10\xe7\x6e\x61\x8f\x87\x3c\x16\xc2\x69\xd8\x60\x77\xb7\xaa\xff\x2c\x39\x3b\x43\xd5\x95\x33\xfb\x4a\xaa\x6e\xc1\x4a\x83\xe0\x20\x95\x85\xcc\x6f\xda\x29\xc6\x53\x3b\x92\x78\x81\x96\x01\x1d\xfd\x90\xaa\x72\xdf\x4a\x5d\x69\x4a\xf1\x72\xfc\xe8\x1a\x4d\xef\x7b\x68\xdf\x6f\xd8\x37\x38\x21\x03\xfa\xd6\x56\xb9\xbd\x53\x08\xb7\xf8\x0a\xa9\x0f\xfb\xdc\x05\x3e\x53\xbf\x23\x27\xf3\x49\xd7\xb4\xea\xed\xdc\xf9\xab\x3c\x79\xa1\xca\x7d\x9b\x44\x90\x23\x8f\xcf\x0e\x71\xac\xa5\x93\x30\x83\xd6\x0c\xd7\x0d\xc5\x39\x27\xaf\xcf\x8b\xda\x5d\x3c\x3e\x9d\xbb\x5b\xf4\x35\xda\x7b\xfb\x73\x87\x76\xbc\x39\xed\x15\x7e\xd9\xb5\xe3\xda\x68\x48\xe1\x7b\xdd\x1f\xe3\x73\x46\xbf\x2f\x26\xc1\x6e\xbc\x2b\x0e\x33\xc3\x37\xbc\x40\xc6\xf8\xdf\x31\xa0\x78\x3e\x27\xe2\x9f\xf4\xe7\x11\xd4\xda\x0f\x2a\xc3\x51\xa5\x2f\x90\xe7\x79\x7e\xae\x46\x72\x91\x22\xa8\x2c\xb8\x8a\x4c\x7c\xcf\x29\x5e\x32\xcd\x0a\x03\x4b\x28\x69\x8c\xa7\x4f\x78\xd4\xf8\x4f\x85\x86\xce\xaa\x88\x63\xc6\xaa\xdc\x1a\x0a\xf3\x24\x1e\xc2\x8c\xf8\x84\xb0\x04\x59\x15\x5b\xd4\x87\xe0\x06\x84\x04\x16\x1c\x9f\x38\xf9\xa1\xef\x45\x69\x8e\xda\x07\xa7\x41\x95\xfe\x38\xf8\xa5\x54\xe5\x55\x21\xff\xb7\x9c\x87\x1b\x16\x11\x8d\xc5\x81\x6e\x38\x80\x7d\x14\x63\xb5\x90\xbb\xee\xf0\x36\xf0\xd7\xdf\x43\x4d\x5a\x65\x59\x4e\x8d\x4c\xd8\xbe\x44\x5d\x0d\x09\x7b\xa1\x8b\xfe\x09\xfd\x46\x71\xcc\xa3\xa1\x74\xe3\x76\x3c\x0a\xb8\xe4\x85\xaa\xa4\x8d\x1e\x75\x81\xdc\xbf\x1b\x92\xb7\xdb\xc2\x5f\xe0\x89\xd3\xd7\x44\x65\x99\x41\x4b\x51\x5c\x52\xb0\x84\xa7\x31\x3c\xee\x52\xf3\x52\x6b\xb9\xac\x8f\xfc\x5f\x38\x60\xe4\xf1\x71\xf2\x87\x28\x84\x8d\x5a\x18\x4d\xdf\x0d\x60\x6e\xd0\x47\x19\x77\x31\xc0\x74\x23\x09\xf1\xf4\xbb\xf9\x60\x0d\xf3\xf9\x5d\x4e\x2e\xc8\x2c\x72\xc6\x71\xd7\x02\x5d\x17\x1f\xec\xa8\xb2\xd1\xa3\x50\x93\xcf\x6d\xb7\xee\xc4\x1e\xed\x37\xe7\xfa\xa8\xb6\x6d\xef\xfd\x17\x00\x00\xff\xff\x14\x9b\xa2\xb7\xd8\x0e\x00\x00")

func assetsTplCurdTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplCurdTpl,
		"assets/tpl/curd.tpl",
	)
}

func assetsTplCurdTpl() (*asset, error) {
	bytes, err := assetsTplCurdTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/curd.tpl", size: 3800, mode: os.FileMode(420), modTime: time.Unix(1597396745, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTplErrorTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xa8\xae\xd6\x0b\x80\x30\xfd\x12\x73\x53\x6b\x6b\xb9\xb8\x32\x73\x0b\xf2\x8b\x4a\x14\x34\xb8\x38\x95\x52\x8b\x8a\xf2\x8b\x8a\x95\xb8\x34\xb9\xb8\xca\x12\x8b\x40\x42\xae\x45\x45\x9e\x79\xc5\xa9\x45\x25\x6e\x89\x99\x39\xa9\x29\x0a\xb6\x0a\x10\x35\x7a\x7e\xa9\xe5\x1a\x4a\x68\xb2\x4a\x9a\x60\x0d\x7e\xf9\x25\x6e\xf9\xa5\x79\x29\x0a\x20\x80\xa1\x01\x26\x0b\x55\xec\x92\x9a\x93\x5a\x92\x8a\xcb\x74\x64\x59\xa8\x86\xd0\x82\x94\x44\xdc\x1a\x90\x65\x95\x34\xb9\x34\xb9\x00\x01\x00\x00\xff\xff\xd3\x24\x3a\x4e\xf8\x00\x00\x00")

func assetsTplErrorTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplErrorTpl,
		"assets/tpl/error.tpl",
	)
}

func assetsTplErrorTpl() (*asset, error) {
	bytes, err := assetsTplErrorTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/error.tpl", size: 248, mode: os.FileMode(420), modTime: time.Unix(1597399698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTplMarkdownTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\xc1\x6a\xea\x40\x14\x86\xf7\x81\xbc\xc3\x81\xb8\x50\xb8\xc9\x03\x08\xf7\x6e\xae\x1b\xb9\x17\xeb\x42\xba\x11\x17\xb1\x9e\x16\x69\x92\x96\x68\xa0\x61\x66\xc0\x45\xa1\x85\xd2\xd6\x45\xc1\xac\x0a\x05\x11\xbb\xa8\x52\xda\x82\x98\x3e\x8e\x19\xf5\x2d\x4a\x66\x9c\xd4\x56\x9a\xc5\x84\xf9\xff\xc3\xf9\x4f\xbe\x13\xc3\x80\xd5\xc3\x98\xf7\x62\x3e\x3a\xd7\x35\x5d\xa3\xc9\xfc\x36\xb9\x1c\xd0\x54\x4d\xfa\xd7\x40\x61\x35\x7d\xe5\xd1\x0d\x50\x48\x86\x17\xfc\x65\x0c\x54\xd7\x68\xd1\x34\x4d\x71\xa8\x13\xe4\x4b\xd7\x08\xf1\x6d\xef\x08\xc1\xaa\xd9\x4d\x07\xff\xb7\x3b\x5d\xc6\x28\x10\x62\x95\xbd\x16\x9e\x31\x46\xeb\xe9\x45\x98\x15\xdb\x45\xc6\x1a\x79\xe3\xd3\xfd\x6a\x15\x40\x3e\x94\x10\xeb\xef\x89\xeb\xa2\x27\x9a\x89\x14\xf4\x5a\x8c\xa5\x03\xab\xc0\xdc\x31\x86\xbf\x20\xd7\xee\xa2\x0b\xc5\xdf\x60\x95\xb0\x73\x20\xe3\x75\xcd\x30\x0c\x20\x44\x78\x2a\xc9\x52\xf7\xad\x3c\x5d\xfb\x93\x95\x65\x79\x69\x86\x29\x68\x3c\x0d\xf8\xe4\x4d\xd2\x90\xa4\x84\x00\x14\x96\xcf\x71\x72\x7f\x05\x14\x78\x34\x4d\xfa\xa3\xc5\x6c\xbe\x7c\x9c\x53\x58\xc7\xd1\x6a\x32\x4c\x7a\xef\x99\xc3\xa3\xe9\x62\x16\xaf\xef\x26\xbb\x58\x15\x55\x73\x97\xed\x37\x61\x0b\xb2\x1c\x75\x03\x59\x40\x72\x02\xd7\x93\x1f\x03\x20\xb0\x4b\xa9\x16\x9e\x62\x25\x70\x9b\xe8\x33\x26\xf5\x72\xa7\x12\x38\xce\x66\x37\x25\x3c\xb4\x03\xa7\xbb\x6f\x3b\x01\xaa\x82\xaa\xdf\x76\x6d\x3f\xfc\x87\xa1\x52\x64\xab\x1f\x16\x51\xaf\xed\x55\x1b\x79\x23\xfb\x97\x0a\x99\xf7\x11\x00\x00\xff\xff\x54\x04\xaf\xad\x62\x02\x00\x00")

func assetsTplMarkdownTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplMarkdownTpl,
		"assets/tpl/markdown.tpl",
	)
}

func assetsTplMarkdownTpl() (*asset, error) {
	bytes, err := assetsTplMarkdownTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/markdown.tpl", size: 610, mode: os.FileMode(420), modTime: time.Unix(1597043494, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/.DS_Store": assetsDs_store,
	"assets/tpl/curd.tpl": assetsTplCurdTpl,
	"assets/tpl/error.tpl": assetsTplErrorTpl,
	"assets/tpl/markdown.tpl": assetsTplMarkdownTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		".DS_Store": &bintree{assetsDs_store, map[string]*bintree{}},
		"tpl": &bintree{nil, map[string]*bintree{
			"curd.tpl": &bintree{assetsTplCurdTpl, map[string]*bintree{}},
			"error.tpl": &bintree{assetsTplErrorTpl, map[string]*bintree{}},
			"markdown.tpl": &bintree{assetsTplMarkdownTpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

