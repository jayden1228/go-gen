// Code generated for package tool by go-bindata DO NOT EDIT. (@generated)
// sources:
// assets/tpl/curd.tpl
// assets/tpl/error.tpl
// assets/tpl/markdown.tpl
package tool

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsTplCurdTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x4d\x8f\xdb\x36\x10\x3d\xdb\x80\xff\xc3\xc4\x08\x02\x29\x90\xe5\xa4\x28\x7a\x48\xe1\x02\xdb\x4d\x1c\x14\x6d\xb2\x41\x36\x3d\x15\x3d\xd0\xe2\xc8\xcb\x5d\x49\x54\x49\x2a\x85\x23\xe8\xbf\x17\x43\x52\xb2\x2d\x69\xbd\x6e\xbe\x7c\xb1\x4c\xcd\xcc\x7b\xc3\x79\x43\x8e\x4b\x96\xdc\xb1\x2d\x42\x5d\xc7\xef\xdc\xe3\x5b\x96\x63\xd3\xcc\xa6\x22\x2f\xa5\x32\x10\xcc\xa6\x93\x2d\xdf\xc0\x9c\x2c\x94\xbc\xc5\xc4\xbc\x91\xbc\xca\xb0\x69\x96\xe5\xdd\x76\xc9\x99\x61\x1b\xa6\x71\x3e\x9b\xce\xa6\x93\xf9\x56\x98\x9b\x6a\x13\x27\x32\x5f\xde\x8a\xe2\xd3\x4d\xb5\x4c\x64\x29\x50\xcd\x67\xd3\x90\x2c\xea\x3a\xfe\xc0\x36\x19\x5e\xca\x3c\xc7\xc2\x10\x90\xd9\x95\x16\xff\xda\xa8\x2a\x31\x0e\x1e\xb4\xfd\x01\x35\x79\x28\x56\x6c\x11\x1e\xdf\x46\xf0\x58\x18\xcc\xe1\xc5\x0a\xe2\xb5\xc0\x8c\xeb\xa6\xa9\x6b\xbb\x16\x7b\x37\xf7\x69\x17\x3f\xec\x4a\xbf\xd8\xae\xac\xa5\xca\x99\x69\x9d\xa1\x67\xff\x1e\x73\xa6\xee\x88\x53\x5d\x63\xc1\xe9\xa1\x21\xd2\xcb\x25\x5c\x70\xde\xa7\x28\x34\x30\x48\xab\x22\x31\x42\x16\x60\x24\x30\xce\x81\x81\x16\xc5\x36\x43\x50\x98\x48\xc5\x69\xb9\x4d\xd9\xbb\x19\x7a\xb6\x31\x51\x29\xa9\x60\x01\xaf\x94\xfa\xad\xd0\xa8\xcc\x9a\x89\x0c\x79\x04\x7c\x03\x9a\x7d\x44\x48\x58\x96\x41\x6a\x17\x67\x53\x42\x1a\xa1\x11\x78\xa0\xa7\xbd\xf5\x10\x02\x85\xba\xca\xcc\xe0\x4d\x04\xef\xe5\xbf\xfa\x22\x4d\x31\x31\xc8\x41\x14\xe6\xa7\x1f\x23\x22\xe3\x08\x85\xb4\xe9\xb4\x2b\x7c\x43\x3b\xbd\xe5\x9b\xf8\x35\x9a\x97\xbf\x06\x61\x7c\xcd\x3e\xa2\xc7\x0b\x67\xd3\x89\x48\xad\xd7\x0a\xf8\x26\x7e\x45\xae\x3f\xdb\xdf\x8f\x56\x50\x88\x8c\xa2\x4c\x28\x8c\x42\x53\xa9\x82\x96\x22\x58\x3c\x8f\xfa\xd9\xce\xa6\x93\x66\x36\x9d\x78\x2b\x17\x9c\x76\x20\x3e\x24\x19\x91\xfb\xbe\x18\x2f\x31\x43\x83\x0f\xd6\x83\x5b\xb3\x41\x49\x52\x25\xf3\xb3\x8a\xf2\x56\x9a\xb5\xac\x0a\x57\x90\xb5\x28\xb8\x7b\xd9\x37\x73\x6c\x0e\x6a\xe7\x16\x7c\xe1\x5a\x1f\x5b\xbe\x51\xe2\x41\xa7\xf0\x81\xba\xa1\xae\x41\xa4\xee\x45\xfc\x4e\x89\x9c\xa9\xdd\xef\xb8\x03\xfb\xe6\x48\xf8\xc7\x92\x8f\xbc\x7e\xed\x17\x2c\x9c\x1a\xce\x2a\xba\xdf\xa3\x17\x2b\x78\xd2\xa3\x59\x37\xf7\xc9\x62\x2d\x94\x36\x41\x5b\xba\x2f\xce\x86\xf8\x1e\x25\xd0\x34\xa1\x83\x16\x69\x27\xb5\x03\x95\xb5\x5d\xec\x25\xe4\x35\xd6\x16\xcf\xbd\xb7\xca\x19\x67\xef\x6a\xb2\x97\xb5\x07\x3a\xad\xec\x71\xcc\x43\x25\x1c\xe3\x7a\xbb\xd3\xb2\xfe\xb3\xe4\xec\x0c\x59\x57\xd6\xec\x2b\xc9\xba\x75\x96\x0a\x04\x87\x42\x1a\x48\xdd\xae\x1d\xfb\x38\x6a\x07\x1a\xcf\xd1\x30\xa0\xb3\x1f\x12\x59\xee\x5a\xad\x4b\x45\x29\x5e\x8f\x9f\x5d\xa3\xe9\x7d\x0f\xf1\xbb\x0d\xfb\x06\x47\xa4\xf7\xbe\xb7\x57\xee\x6f\x15\xf2\x8b\xbe\x42\xea\xc3\x46\xb7\xc0\x67\xea\x77\xe4\x68\x3e\x6a\x9b\x56\xbd\x5d\x38\x77\x97\xc7\x97\xb2\xdc\xb5\x49\x78\x39\xf2\xf0\x6c\x88\x43\x2d\x1d\xc1\xdc\x7b\xe1\x10\xd0\x39\x89\x7d\x1e\x6c\x77\xf5\xb8\x7c\x4e\xf7\xe8\x6b\x34\x0f\x36\xe8\x16\xcd\x78\x77\x9a\x1b\xfc\xb2\x8b\xc7\xf6\xd1\x90\xc2\xf7\xba\x41\xc6\x27\x8d\x7e\x63\x4c\xbc\xdd\x78\x5b\xec\xa7\x86\x6f\x78\x85\x8c\xf1\x3f\x31\xa2\x38\x3e\x47\xea\x9f\xf4\x27\x12\x54\xca\x8d\x2a\xc3\x61\xa5\x2f\x90\x8b\x2c\x3b\x57\x23\x99\x48\x10\x64\xea\x43\x05\x3a\x7c\xe0\x18\x2f\x99\x62\xb9\x86\x05\x94\x34\xb4\xd3\xc7\x3f\x2a\xfc\xa7\x42\x4d\x87\x55\xc0\x31\x65\x55\x66\x34\xc1\x3c\x0b\x87\x6e\x5a\x7c\x42\x58\x40\x51\xe5\x1b\x54\x7b\x70\x0d\xa2\x00\xe6\x03\x1f\x05\xf9\xa1\x1f\x45\x2a\x8e\xca\x81\xd3\xa8\x4a\x7f\x13\xdc\x52\x22\xb3\x2a\x2f\xfe\xb7\x9c\x87\x1b\x16\x10\x8d\x68\x4f\xd7\x9f\xc0\x0e\x45\x1b\x25\x8a\x6d\x77\x7a\x6b\xf8\xeb\xef\xa1\x26\x8d\x34\x2c\xa3\x46\x26\xdf\xbe\x44\x6d\x0d\xc9\xf7\x4a\xe5\xfd\x33\xe7\x8d\xe4\x98\x05\x43\xe9\x86\xed\x80\xe4\xfd\xe2\x4b\x59\x15\x26\x78\xd2\x01\xd9\xff\x37\x24\x6f\xbb\x85\xbf\xc0\x33\xab\xaf\x89\x4c\x53\x8d\x86\x50\x6c\x52\xb0\x80\xe7\x21\x3c\xed\x52\x73\x52\x6b\xb9\xac\x0e\xe2\x5f\x59\xc7\xc0\xf9\x87\xf1\x1f\x22\x17\x26\x68\xdd\x68\xfe\x6e\x00\x33\x8d\x0e\x65\x3c\xc4\xc0\xa7\x9b\x49\x88\xa7\xdb\xcd\x47\x2b\x98\xcf\x4f\x05\xb9\x22\xb3\xc0\x1a\x87\x5d\x0b\x74\x5d\xbc\xb7\xa3\xca\x06\x4f\x7c\x4d\x3e\xb7\xdd\xba\x13\x7b\xb4\xdf\x6c\xe8\x83\xda\xb6\xbd\xf7\x5f\x00\x00\x00\xff\xff\xbf\x35\x2c\x6b\xc6\x0e\x00\x00")

func assetsTplCurdTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplCurdTpl,
		"assets/tpl/curd.tpl",
	)
}

func assetsTplCurdTpl() (*asset, error) {
	bytes, err := assetsTplCurdTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/curd.tpl", size: 3782, mode: os.FileMode(420), modTime: time.Unix(1597912049, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTplErrorTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xa8\xae\xd6\x0b\x80\x30\xfd\x12\x73\x53\x6b\x6b\xb9\xb8\x32\x73\x0b\xf2\x8b\x4a\x14\x34\xb8\x38\x95\x52\x8b\x8a\xf2\x8b\x8a\x95\xb8\x34\xb9\xb8\xca\x12\x8b\x40\x42\xae\x45\x45\x9e\x79\xc5\xa9\x45\x25\x6e\x89\x99\x39\xa9\x29\x0a\xb6\x0a\x10\x35\x7a\x7e\xa9\xe5\x1a\x4a\x68\xb2\x4a\x9a\x60\x0d\x7e\xf9\x25\x6e\xf9\xa5\x79\x29\x0a\x20\x80\xa1\x01\x26\x0b\x55\xec\x92\x9a\x93\x5a\x92\x8a\xcb\x74\x64\x59\xa8\x86\xd0\x82\x94\x44\xdc\x1a\x90\x65\x95\x34\xb9\x34\xb9\x00\x01\x00\x00\xff\xff\xd3\x24\x3a\x4e\xf8\x00\x00\x00")

func assetsTplErrorTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplErrorTpl,
		"assets/tpl/error.tpl",
	)
}

func assetsTplErrorTpl() (*asset, error) {
	bytes, err := assetsTplErrorTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/error.tpl", size: 248, mode: os.FileMode(420), modTime: time.Unix(1597911310, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTplMarkdownTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\xc1\x6a\xea\x40\x14\x86\xf7\x81\xbc\xc3\x81\xb8\x50\xb8\xc9\x03\x08\xf7\x6e\xae\x1b\xb9\x17\xeb\x42\xba\x11\x17\xb1\x9e\x16\x69\x92\x96\x68\xa0\x61\x66\xc0\x45\xa1\x85\xd2\xd6\x45\xc1\xac\x0a\x05\x11\xbb\xa8\x52\xda\x82\x98\x3e\x8e\x19\xf5\x2d\x4a\x66\x9c\xd4\x56\x9a\xc5\x84\xf9\xff\xc3\xf9\x4f\xbe\x13\xc3\x80\xd5\xc3\x98\xf7\x62\x3e\x3a\xd7\x35\x5d\xa3\xc9\xfc\x36\xb9\x1c\xd0\x54\x4d\xfa\xd7\x40\x61\x35\x7d\xe5\xd1\x0d\x50\x48\x86\x17\xfc\x65\x0c\x54\xd7\x68\xd1\x34\x4d\x71\xa8\x13\xe4\x4b\xd7\x08\xf1\x6d\xef\x08\xc1\xaa\xd9\x4d\x07\xff\xb7\x3b\x5d\xc6\x28\x10\x62\x95\xbd\x16\x9e\x31\x46\xeb\xe9\x45\x98\x15\xdb\x45\xc6\x1a\x79\xe3\xd3\xfd\x6a\x15\x40\x3e\x94\x10\xeb\xef\x89\xeb\xa2\x27\x9a\x89\x14\xf4\x5a\x8c\xa5\x03\xab\xc0\xdc\x31\x86\xbf\x20\xd7\xee\xa2\x0b\xc5\xdf\x60\x95\xb0\x73\x20\xe3\x75\xcd\x30\x0c\x20\x44\x78\x2a\xc9\x52\xf7\xad\x3c\x5d\xfb\x93\x95\x65\x79\x69\x86\x29\x68\x3c\x0d\xf8\xe4\x4d\xd2\x90\xa4\x84\x00\x14\x96\xcf\x71\x72\x7f\x05\x14\x78\x34\x4d\xfa\xa3\xc5\x6c\xbe\x7c\x9c\x53\x58\xc7\xd1\x6a\x32\x4c\x7a\xef\x99\xc3\xa3\xe9\x62\x16\xaf\xef\x26\xbb\x58\x15\x55\x73\x97\xed\x37\x61\x0b\xb2\x1c\x75\x03\x59\x40\x72\x02\xd7\x93\x1f\x03\x20\xb0\x4b\xa9\x16\x9e\x62\x25\x70\x9b\xe8\x33\x26\xf5\x72\xa7\x12\x38\xce\x66\x37\x25\x3c\xb4\x03\xa7\xbb\x6f\x3b\x01\xaa\x82\xaa\xdf\x76\x6d\x3f\xfc\x87\xa1\x52\x64\xab\x1f\x16\x51\xaf\xed\x55\x1b\x79\x23\xfb\x97\x0a\x99\xf7\x11\x00\x00\xff\xff\x54\x04\xaf\xad\x62\x02\x00\x00")

func assetsTplMarkdownTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplMarkdownTpl,
		"assets/tpl/markdown.tpl",
	)
}

func assetsTplMarkdownTpl() (*asset, error) {
	bytes, err := assetsTplMarkdownTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/markdown.tpl", size: 610, mode: os.FileMode(420), modTime: time.Unix(1597286052, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/tpl/curd.tpl":     assetsTplCurdTpl,
	"assets/tpl/error.tpl":    assetsTplErrorTpl,
	"assets/tpl/markdown.tpl": assetsTplMarkdownTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"tpl": &bintree{nil, map[string]*bintree{
			"curd.tpl":     &bintree{assetsTplCurdTpl, map[string]*bintree{}},
			"error.tpl":    &bintree{assetsTplErrorTpl, map[string]*bintree{}},
			"markdown.tpl": &bintree{assetsTplMarkdownTpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
